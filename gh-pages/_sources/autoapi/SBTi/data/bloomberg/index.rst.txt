:py:mod:`SBTi.data.bloomberg`
=============================

.. py:module:: SBTi.data.bloomberg


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   SBTi.data.bloomberg.Bloomberg




.. py:class:: Bloomberg

   Bases: :py:obj:`SBTi.data.data_provider.DataProvider`

   Data provider skeleton for Bloomberg.

   .. py:method:: _request(self, endpoint: str, data: dict) -> Optional[object]

      Request data from the server.
      Note: This request does in no way reflect the actual implementation, this is only a stub to show what a
      potential API request COULD look like.

      :param endpoint: The endpoint of the API
      :param data: The data to send as a body
      :return: The returned data, None in case of an error.


   .. py:method:: get_targets(self, company_ids: List[str]) -> List[SBTi.interfaces.IDataProviderTarget]
      :abstractmethod:

      Get all relevant targets for a list of company ids (ISIN). This method should return a list of
      IDataProviderTarget instances.

      :param company_ids: A list of company IDs (ISINs)
      :return: A list containing the targets


   .. py:method:: get_company_data(self, company_ids: List[str]) -> List[SBTi.interfaces.IDataProviderCompany]
      :abstractmethod:

      Get all relevant data for a list of company ids (ISIN). This method should return a list of IDataProviderCompany
      instances.

      :param company_ids: A list of company IDs (ISINs)
      :return: A list containing the company data


   .. py:method:: get_sbti_targets(self, companies: list) -> list
      :abstractmethod:

      For each of the companies, get the status of their target (Target set, Committed or No target) as it's known to
      the SBTi.

      :param companies: A list of companies. Each company should be a dict with a "company_name" and "company_id"
                          field.
      :return: The original list, enriched with a field called "sbti_target_status"



